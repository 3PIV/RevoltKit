//
// ServerMembersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ServerMembersAPI {

    /**
     Fetch Bans
     
     - parameter server: (path) Server ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serversServerBansGet(server: IdModel, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ServersServerMembersFetchBansResponseModel?, _ error: Error?) -> Void)) {
        serversServerBansGetWithRequestBuilder(server: server).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch Bans
     - GET /servers/:server/bans
     - Fetch all bans on server.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter server: (path) Server ID 
     - returns: RequestBuilder<InlineResponse2005Model> 
     */
    open class func serversServerBansGetWithRequestBuilder(server: IdModel) -> RequestBuilder<ServersServerMembersFetchBansResponseModel> {
        var localVariablePath = "/servers/:server/bans"
        let serverPreEscape = "\(APIHelper.mapValueToPathItem(server))"
        let serverPostEscape = serverPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{server}", with: serverPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServersServerMembersFetchBansResponseModel>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unban User
     
     - parameter server: (path) Server ID 
     - parameter member: (path) Member ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serversServerBansMemberDelete(server: IdModel, member: IdModel, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        serversServerBansMemberDeleteWithRequestBuilder(server: server, member: member).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unban User
     - DELETE /servers/:server/bans/:member
     - Removes a user's ban.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter server: (path) Server ID 
     - parameter member: (path) Member ID 
     - returns: RequestBuilder<Void> 
     */
    open class func serversServerBansMemberDeleteWithRequestBuilder(server: IdModel, member: IdModel) -> RequestBuilder<Void> {
        var localVariablePath = "/servers/:server/bans/:member"
        let serverPreEscape = "\(APIHelper.mapValueToPathItem(server))"
        let serverPostEscape = serverPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{server}", with: serverPostEscape, options: .literal, range: nil)
        let memberPreEscape = "\(APIHelper.mapValueToPathItem(member))"
        let memberPostEscape = memberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{member}", with: memberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Ban User
     
     - parameter server: (path) Server ID 
     - parameter member: (path) Member ID 
     - parameter inlineObject24Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serversServerBansMemberPut(server: IdModel, member: IdModel, banUserReasonModel: ServersServerMembersBanUserReasonModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        serversServerBansMemberPutWithRequestBuilder(server: server, member: member, inlineObject24Model: banUserReasonModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ban User
     - PUT /servers/:server/bans/:member
     - Ban a user by their ID.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter server: (path) Server ID 
     - parameter member: (path) Member ID 
     - parameter inlineObject24Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func serversServerBansMemberPutWithRequestBuilder(server: IdModel, member: IdModel, banUserReasonModel: ServersServerMembersBanUserReasonModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/servers/:server/bans/:member"
        let serverPreEscape = "\(APIHelper.mapValueToPathItem(server))"
        let serverPostEscape = serverPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{server}", with: serverPostEscape, options: .literal, range: nil)
        let memberPreEscape = "\(APIHelper.mapValueToPathItem(member))"
        let memberPostEscape = memberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{member}", with: memberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: banUserReasonModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetch Members
     
     - parameter server: (path) Server ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serversServerMembersGet(server: IdModel, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ServersServerMembersFetchMembersResponseModel?, _ error: Error?) -> Void)) {
        serversServerMembersGetWithRequestBuilder(server: server).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch Members
     - GET /servers/:server/members
     - Fetch all server members.
     - parameter server: (path) Server ID 
     - returns: RequestBuilder<InlineResponse2004Model> 
     */
    open class func serversServerMembersGetWithRequestBuilder(server: IdModel) -> RequestBuilder<ServersServerMembersFetchMembersResponseModel> {
        var localVariablePath = "/servers/:server/members"
        let serverPreEscape = "\(APIHelper.mapValueToPathItem(server))"
        let serverPostEscape = serverPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{server}", with: serverPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServersServerMembersFetchMembersResponseModel>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Kick Member
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serversServerMembersMemberDelete(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        serversServerMembersMemberDeleteWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Kick Member
     - DELETE /servers/:server/members/:member
     - Removes a member from the server.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - returns: RequestBuilder<Void> 
     */
    open class func serversServerMembersMemberDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/servers/:server/members/:member"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetch Member
     
     - parameter server: (path) Server ID 
     - parameter member: (path) Member ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serversServerMembersMemberGet(server: IdModel, member: IdModel, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: MemberModel?, _ error: Error?) -> Void)) {
        serversServerMembersMemberGetWithRequestBuilder(server: server, member: member).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch Member
     - GET /servers/:server/members/:member
     - Retrieve a member.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter server: (path) Server ID 
     - parameter member: (path) Member ID 
     - returns: RequestBuilder<MemberModel> 
     */
    open class func serversServerMembersMemberGetWithRequestBuilder(server: IdModel, member: IdModel) -> RequestBuilder<MemberModel> {
        var localVariablePath = "/servers/:server/members/:member"
        let serverPreEscape = "\(APIHelper.mapValueToPathItem(server))"
        let serverPostEscape = serverPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{server}", with: serverPostEscape, options: .literal, range: nil)
        let memberPreEscape = "\(APIHelper.mapValueToPathItem(member))"
        let memberPostEscape = memberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{member}", with: memberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MemberModel>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Edit Member
     
     - parameter server: (path) Server ID 
     - parameter inlineObject23Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serversServerMembersMemberPatch(server: IdModel, memberEditMemberModel: ServersServerMembersEditMemberModel? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        serversServerMembersMemberPatchWithRequestBuilder(server: server, inlineObject23Model: memberEditMemberModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit Member
     - PATCH /servers/:server/members/:member
     - Edit a member object.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter server: (path) Server ID 
     - parameter inlineObject23Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func serversServerMembersMemberPatchWithRequestBuilder(server: IdModel, membersEditMemberModel: ServersServerMembersEditMemberModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/servers/:server/members/:member"
        let serverPreEscape = "\(APIHelper.mapValueToPathItem(server))"
        let serverPostEscape = serverPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{server}", with: serverPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: membersEditMemberModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
