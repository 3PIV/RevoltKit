//
// InlineResponse2002ChangedModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChannelsMessagingSendMessageResponseModel: Codable, Hashable {

    /** Message Id */
    public var id: String
    /** Nonce value, prefer to use ULIDs here for better feature support.  Used to prevent double requests to create objects. */
    public var nonce: String?
    /** Channel Id */
    public var channel: String
    /** Author Id */
    public var author: String
    /** Message content, can be an object *only* if sent by the system user. */
    public var content: AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectstringModel
    /** Message attachments */
    public var attachments: [AttachmentModel]?
    public var edited: ChannelsMessagingFetchMessageEditedResponseModel?
    /** Message link embeds */
    public var embeds: [AnyOfobjectobjectobjectModel]?
    /** Array of user IDs mentioned in message */
    public var mentions: [String]?
    /** Array of message IDs replied to */
    public var replies: [String]?

    public init(id: String, nonce: String? = nil, channel: String, author: String, content: AnyOfobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectstringModel, attachments: [AttachmentModel]? = nil, edited: ChannelsMessagingFetchMessageEditedResponseModel? = nil, embeds: [AnyOfobjectobjectobjectModel]? = nil, mentions: [String]? = nil, replies: [String]? = nil) {
        self.id = id
        self.nonce = nonce
        self.channel = channel
        self.author = author
        self.content = content
        self.attachments = attachments
        self.edited = edited
        self.embeds = embeds
        self.mentions = mentions
        self.replies = replies
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "_id"
        case nonce
        case channel
        case author
        case content
        case attachments
        case edited
        case embeds
        case mentions
        case replies
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encode(channel, forKey: .channel)
        try container.encode(author, forKey: .author)
        try container.encode(content, forKey: .content)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(edited, forKey: .edited)
        try container.encodeIfPresent(embeds, forKey: .embeds)
        try container.encodeIfPresent(mentions, forKey: .mentions)
        try container.encodeIfPresent(replies, forKey: .replies)
    }
}

