//
// ChannelPermissionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ChannelPermissionsAPI {

    /**
     Set Default Permission
     
     - parameter channel: (path) Channel ID 
     - parameter setDefaultPermissionModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func channelsChannelPermissionsDefaultPut(channel: ChannelIDModel, setDefaultPermissionModel: ChannelsChannelPermissionsSetDefaultPermissionModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        channelsChannelPermissionsDefaultPutWithRequestBuilder(channel: channel, setDefaultPermissionModel: setDefaultPermissionModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set Default Permission
     - PUT /channels/:channel/permissions/default
     - Sets permissions for the default role in this channel.  Channel must be a `Group`, `TextChannel` or `VoiceChannel`.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter channel: (path) Channel ID 
     - parameter setDefaultPermissionModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func channelsChannelPermissionsDefaultPutWithRequestBuilder(channel: ChannelIDModel, setDefaultPermissionModel: ChannelsChannelPermissionsSetDefaultPermissionModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/channels/:channel/permissions/default"
        let channelPreEscape = "\(APIHelper.mapValueToPathItem(channel))"
        let channelPostEscape = channelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{channel}", with: channelPostEscape, options: .literal, range: nil)
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setDefaultPermissionModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Set Role Permission
     
     - parameter channel: (path) Channel ID 
     - parameter role: (path) Role ID 
     - parameter setRolePermissionModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func channelsChannelPermissionsRolePut(channel: ChannelIDModel, role: RoleIDModel, setRolePermissionModel: ChannelsChannelPermissionSetRolePermissionModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        channelsChannelPermissionsRolePutWithRequestBuilder(channel: channel, role: role, inlineObject12Model: setRolePermissionModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set Role Permission
     - PUT /channels/:channel/permissions/:role
     - Sets permissions for the specified role in this channel.  Channel must be a `TextChannel` or `VoiceChannel`.
     - API Key:
       - type: apiKey x-bot-token 
       - name: Bot Token
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter channel: (path) Channel ID 
     - parameter role: (path) Role ID 
     - parameter setRolePermissionModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func channelsChannelPermissionsRolePutWithRequestBuilder(channel: ChannelIDModel, role: RoleIDModel, setRolePermissionModel: ChannelsChannelPermissionSetRolePermissionModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/channels/:channel/permissions/:role"
        let channelPreEscape = "\(APIHelper.mapValueToPathItem(channel))"
        let channelPostEscape = channelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{channel}", with: channelPostEscape, options: .literal, range: nil)
        let rolePreEscape = "\(APIHelper.mapValueToPathItem(role))"
        let rolePostEscape = rolePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{role}", with: rolePostEscape, options: .literal, range: nil)
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setRolePermissionModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
