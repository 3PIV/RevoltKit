//
// AccountAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccountAPI {

    /**
     Change Email
     
     - parameter inlineObject6Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountChangeEmailPatch(changeEmailModel: AuthAccountChangeEmailModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        authAccountChangeEmailPatchWithRequestBuilder(changeEmailModel: changeEmailModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Change Email
     - PATCH /auth/account/change/email
     - Change account email.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter inlineObject6Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func authAccountChangeEmailPatchWithRequestBuilder(changeEmailModel: AuthAccountChangeEmailModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/account/change/email"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changeEmailModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Change Password
     
     - parameter inlineObject5Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountChangePasswordPatch(changePasswordModel: AuthAccountChangePasswordModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        authAccountChangePasswordPatchWithRequestBuilder(changePasswordModel: changePasswordModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Change Password
     - PATCH /auth/account/change/password
     - Change account password.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter inlineObject5Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func authAccountChangePasswordPatchWithRequestBuilder(changePasswordModel: AuthAccountChangePasswordModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/account/change/password"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changePasswordModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Account
     
     - parameter inlineObject1Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountCreatePost(createAccountModel: AuthAccountCreateAccountModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        authAccountCreatePostWithRequestBuilder(createAccountModel: createAccountModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Account
     - POST /auth/account/create
     - Create a new account.
     - parameter inlineObject1Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func authAccountCreatePostWithRequestBuilder(createAccountModel: AuthAccountCreateAccountModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/account/create"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAccountModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetch Account
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountGet(apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: AccountModel?, _ error: Error?) -> Void)) {
        authAccountGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch Account
     - GET /auth/account
     - Fetch account information.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - returns: RequestBuilder<AccountModel> 
     */
    open class func authAccountGetWithRequestBuilder() -> RequestBuilder<AccountModel> {
        let localVariablePath = "/auth/account"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountModel>.Type = RevoltAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Password Reset
     
     - parameter inlineObject4Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountResetPasswordPatch(passwordResetModel: AuthAccountPasswordResetModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        authAccountResetPasswordPatchWithRequestBuilder(passwordResetModel: passwordResetModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Password Reset
     - PATCH /auth/account/reset_password
     - Confirm password reset.
     - parameter inlineObject4Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func authAccountResetPasswordPatchWithRequestBuilder(passwordResetModel: AuthAccountPasswordResetModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/account/reset_password"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordResetModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Send Password Reset
     
     - parameter inlineObject3Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountResetPasswordPost(sendPasswordResetModel: AuthAccountSendPasswordResetModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        authAccountResetPasswordPostWithRequestBuilder(sendPasswordResetModel: sendPasswordResetModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send Password Reset
     - POST /auth/account/reset_password
     - Send password reset email.
     - parameter inlineObject3Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func authAccountResetPasswordPostWithRequestBuilder(sendPasswordResetModel: AuthAccountSendPasswordResetModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/account/reset_password"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendPasswordResetModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Resend Verification
     
     - parameter inlineObject2Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountReverifyPost(resendVerificationModel: AuthAccountResendVerificationModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        authAccountReverifyPostWithRequestBuilder(resendVerificationModel: resendVerificationModel).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Resend Verification
     - POST /auth/account/reverify
     - Resend account creation verification email.
     - parameter inlineObject2Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func authAccountReverifyPostWithRequestBuilder(resendVerificationModel: AuthAccountResendVerificationModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/account/reverify"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resendVerificationModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Verify Email
     
     - parameter code: (path) Verification Code 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authAccountVerifyCodePost(code: IdModel, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        authAccountVerifyCodePostWithRequestBuilder(code: code).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Verify Email
     - POST /auth/account/verify/:code
     - Verifies an email with code.
     - parameter code: (path) Verification Code 
     - returns: RequestBuilder<Void> 
     */
    open class func authAccountVerifyCodePostWithRequestBuilder(code: IdModel) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/account/verify/:code"
        let codePreEscape = "\(APIHelper.mapValueToPathItem(code))"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
