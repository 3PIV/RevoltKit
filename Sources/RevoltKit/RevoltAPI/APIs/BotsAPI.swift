//
// BotsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BotsAPI {

    /**
     Delete Bot
     
     - parameter bot: (path) Bot ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func botsBotDelete(bot: BotIDModel, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        botsBotDeleteWithRequestBuilder(bot: bot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Bot
     - DELETE /bots/:bot
     - Delete a bot.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter bot: (path) Bot ID 
     - returns: RequestBuilder<Void> 
     */
    open class func botsBotDeleteWithRequestBuilder(bot: BotIDModel) -> RequestBuilder<Void> {
        var localVariablePath = "/bots/:bot"
        let botPreEscape = "\(APIHelper.mapValueToPathItem(bot))"
        let botPostEscape = botPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{bot}", with: botPostEscape, options: .literal, range: nil)
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetch Bot
     
     - parameter bot: (path) Bot ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func botsBotGet(bot: BotIDModel, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: BotsFetchBotResponseModel?, _ error: Error?) -> Void)) {
        botsBotGetWithRequestBuilder(bot: bot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch Bot
     - GET /bots/:bot
     - Fetch details of an owned bot.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter bot: (path) Bot ID 
     - returns: RequestBuilder<InlineResponse2008Model> 
     */
    open class func botsBotGetWithRequestBuilder(bot: BotIDModel) -> RequestBuilder<BotsFetchBotResponseModel> {
        var localVariablePath = "/bots/:bot"
        let botPreEscape = "\(APIHelper.mapValueToPathItem(bot))"
        let botPostEscape = botPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{bot}", with: botPostEscape, options: .literal, range: nil)
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BotsFetchBotResponseModel>.Type = RevoltAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetch Public Bot
     
     - parameter bot: (path) Bot ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func botsBotInviteGet(bot: BotIDModel, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: BotModel?, _ error: Error?) -> Void)) {
        botsBotInviteGetWithRequestBuilder(bot: bot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch Public Bot
     - GET /bots/:bot/invite
     - Fetch details of a public (or owned) bot.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter bot: (path) Bot ID 
     - returns: RequestBuilder<BotModel>
     */
    open class func botsBotInviteGetWithRequestBuilder(bot: BotIDModel) -> RequestBuilder<BotModel> {
        var localVariablePath = "/bots/:bot/invite"
        let botPreEscape = "\(APIHelper.mapValueToPathItem(bot))"
        let botPostEscape = botPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{bot}", with: botPostEscape, options: .literal, range: nil)
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BotModel>.Type = RevoltAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Invite Public Bot
     
     - parameter bot: (path) Bot ID 
     - parameter location: (body) Information about where to invite the bot. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func botsBotInvitePost(bot: BotIDModel, location: BotInviteLocationModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        botsBotInvitePostWithRequestBuilder(bot: bot, location: location).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Invite Public Bot
     - POST /bots/:bot/invite
     - Invite a bot to a server or group.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter bot: (path) Bot ID 
     - parameter location: (body) Information about where to invite the bot. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func botsBotInvitePostWithRequestBuilder(bot: BotIDModel, location: BotInviteLocationModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/bots/:bot/invite"
        let botPreEscape = "\(APIHelper.mapValueToPathItem(bot))"
        let botPostEscape = botPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{bot}", with: botPostEscape, options: .literal, range: nil)
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: location)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Edit Bot
     
     - parameter inlineObject29Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func botsBotPatch(inlineObject29Model: BotsEditBotModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        botsBotPatchWithRequestBuilder(editBotModel: inlineObject29Model).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit Bot
     - PATCH /bots/:bot
     - Edit bot details.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter inlineObject29Model: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func botsBotPatchWithRequestBuilder(editBotModel: BotsEditBotModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/bots/:bot"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: editBotModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = RevoltAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Bot
     
     - parameter inlineObject28Model: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func botsCreatePost(inlineObject28Model: BotsCreateBotModel? = nil, apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: BotModel?, _ error: Error?) -> Void)) {
        botsCreatePostWithRequestBuilder(inlineObject28Model: inlineObject28Model).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Bot
     - POST /bots/create
     - Create a new Revolt bot.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - parameter inlineObject28Model: (body)  (optional)
     - returns: RequestBuilder<BotModel> 
     */
    open class func botsCreatePostWithRequestBuilder(createBotModel: BotsCreateBotModel? = nil) -> RequestBuilder<BotModel> {
        let localVariablePath = "/bots/create"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createBotModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BotModel>.Type = RevoltAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetch Owned Bots
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func botsMeGet(apiResponseQueue: DispatchQueue = RevoltAPIClient.apiResponseQueue, completion: @escaping ((_ data: BotsFetchOwnedBotsResponseModel?, _ error: Error?) -> Void)) {
        botsMeGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch Owned Bots
     - GET /bots/@me
     - Fetch all of your bots.
     - API Key:
       - type: apiKey x-session-token 
       - name: Session Token
     - returns: RequestBuilder<InlineResponse2007Model> 
     */
    open class func botsMeGetWithRequestBuilder() -> RequestBuilder<BotsFetchOwnedBotsResponseModel> {
        let localVariablePath = "/bots/@me"
        let localVariableURLString = RevoltAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BotsFetchOwnedBotsResponseModel>.Type = RevoltAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
